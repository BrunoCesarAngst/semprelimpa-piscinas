name: CI/CD Pipeline

on:
  pull_request:
    branches: [main]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
  push:
    branches: [main]
    paths-ignore:
      - 'README.md'
      - 'docs/**'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -r requirements.txt

      - name: Instalar dependências
        run: pip install -r requirements.txt

      - name: Run tests
        run: |
          pytest tests/ --cov=./ --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v2
        with:
          file: ./coverage.xml

  staging:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Criar diretório do banco de dados
        run: mkdir -p data

      - name: Criar .env.staging
        run: |
          echo "ENVIRONMENT=staging" > .env.staging
          echo "DB_PATH=data/database_staging.db" >> .env.staging
          echo "ADMIN_SECRET=${{ secrets.ADMIN_SECRET_STAGING }}" >> .env.staging
          echo "WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY_STAGING }}" >> .env.staging
          echo "WHATSAPP_LINK=${{ secrets.WHATSAPP_LINK }}" >> .env.staging

      - name: Run migrations on staging
        run: alembic upgrade head

      - name: Validate staging
        run: |
          ENVIRONMENT=staging VALIDATE_DB=true python -c "from streamlit_app import get_db_connection; conn = get_db_connection(); conn.close()"

  deploy:
    needs: staging
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run migrations on production
        run: |
          ENVIRONMENT=production python init_db.py

      - name: Deploy to production
        run: |
          # Aqui você adicionaria os comandos para deploy em produção
          # Por exemplo, se estiver usando um servidor:
          # scp -r ./* user@server:/path/to/app
          echo "Deploy para produção concluído"
