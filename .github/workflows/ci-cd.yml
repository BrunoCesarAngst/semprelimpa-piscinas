name: CI/CD Pipeline

on:
  pull_request:
    branches: [main]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
  push:
    branches: [main]
    paths-ignore:
      - 'README.md'
      - 'docs/**'

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      DB_PATH: data/database_test.db
      ENVIRONMENT: test
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Criar diretÃ³rio e .env.test
        run: |
          mkdir -p data
          touch "$DB_PATH"
          echo "ENVIRONMENT=test" > .env.test
          echo "DB_PATH=$DB_PATH" >> .env.test

      - name: Exportar DATABASE_URL para Alembic
        run: |
          echo "DATABASE_URL=sqlite:///${DB_PATH}" >> $GITHUB_ENV

      - name: Instalar dependÃªncias e rodar migraÃ§Ãµes
        env:
          ALEMBIC_MIGRATION: "true"
        run: |
          set -e
          python -m pip install --upgrade pip
          pip install pytest pytest-cov alembic
          pip install -r requirements.txt

          # Marcar base e aplicar todas as migrations
          alembic stamp base
          alembic upgrade head

          # Extrair apenas o bloco inicial de hex na primeira ocorrÃªncia
          current=$(alembic current 2>&1 | grep -m1 -Eo '^[0-9a-f]+' || true)
          heads=$(alembic heads 2>&1 | grep -m1 -Eo '^[0-9a-f]+' || true)

          echo "Current revision: ${current:-<nenhuma>}"
          echo "Head revision:    ${heads:-<nenhuma>}"

          if [[ -z "$current" || "$current" != "$heads" ]]; then
            echo "::error ::Migrations faltando ou parsing falhou! Verifique se vocÃª comitou todas as migrations."
            exit 1
          fi

      - name: Run tests
        run: |
          pytest tests/ --cov=./ --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v2
        with:
          file: ./coverage.xml

  staging:
    needs: test
    runs-on: ubuntu-latest
    env:
      DB_PATH: data/database_staging.db
      ENVIRONMENT: staging
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Criar diretÃ³rio e .env.staging
        run: |
          mkdir -p data
          touch "$DB_PATH"
          echo "ENVIRONMENT=staging" > .env.staging
          echo "DB_PATH=$DB_PATH" >> .env.staging
          echo "ADMIN_SECRET=${{ secrets.ADMIN_SECRET_STAGING }}" >> .env.staging
          echo "WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY_STAGING }}" >> .env.staging
          echo "WHATSAPP_LINK=${{ secrets.WHATSAPP_LINK }}" >> .env.staging

      - name: Exportar DATABASE_URL para Alembic
        run: |
          echo "DATABASE_URL=sqlite:///${DB_PATH}" >> $GITHUB_ENV

      - name: Instalar dependÃªncias e rodar migraÃ§Ãµes
        env:
          ALEMBIC_MIGRATION: "true"
        run: |
          set -e
          python -m pip install --upgrade pip
          pip install alembic
          pip install -r requirements.txt

          # Marcar base e aplicar todas as migrations
          alembic stamp base
          alembic upgrade head

          # Extrair apenas o bloco inicial de hex na primeira ocorrÃªncia
          current=$(alembic current 2>&1 | grep -m1 -Eo '^[0-9a-f]+' || true)
          heads=$(alembic heads 2>&1 | grep -m1 -Eo '^[0-9a-f]+' || true)

          echo "Current revision: ${current:-<nenhuma>}"
          echo "Head revision:    ${heads:-<nenhuma>}"

          if [[ -z "$current" || "$current" != "$heads" ]]; then
            echo "::error ::Migrations faltando ou parsing falhou! Verifique se vocÃª comitou todas as migrations."
            exit 1
          fi

      - name: Validate staging
        run: |
          ENVIRONMENT=staging VALIDATE_DB=true python -c "from sqlalchemy import create_engine; from config import settings; engine = create_engine(f'sqlite:///{settings.DB_PATH}'); conn = engine.connect(); conn.close()"

  deploy:
    needs: staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      DB_PATH: data/database_production.db
      ENVIRONMENT: production
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Criar diretÃ³rio e .env.production
        run: |
          mkdir -p data
          touch "$DB_PATH"
          echo "ENVIRONMENT=production" > .env.production
          echo "DB_PATH=$DB_PATH" >> .env.production
          echo "ADMIN_SECRET=${{ secrets.ADMIN_SECRET_PRODUCTION }}" >> .env.production
          echo "WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY_PRODUCTION }}" >> .env.production
          echo "WHATSAPP_LINK=${{ secrets.WHATSAPP_LINK }}" >> .env.production

      - name: Exportar DATABASE_URL para Alembic
        run: |
          echo "DATABASE_URL=sqlite:///${DB_PATH}" >> $GITHUB_ENV

      - name: Instalar dependÃªncias e rodar migraÃ§Ãµes
        env:
          ALEMBIC_MIGRATION: "true"
        run: |
          set -e
          python -m pip install --upgrade pip
          pip install alembic
          pip install -r requirements.txt

          # Marcar base e aplicar todas as migrations
          alembic stamp base
          alembic upgrade head

          # Extrair apenas o bloco inicial de hex na primeira ocorrÃªncia
          current=$(alembic current 2>&1 | grep -m1 -Eo '^[0-9a-f]+' || true)
          heads=$(alembic heads 2>&1 | grep -m1 -Eo '^[0-9a-f]+' || true)

          echo "Current revision: ${current:-<nenhuma>}"
          echo "Head revision:    ${heads:-<nenhuma>}"

          if [[ -z "$current" || "$current" != "$heads" ]]; then
            echo "::error ::Migrations faltando ou parsing falhou! Verifique se vocÃª comitou todas as migrations."
            exit 1
          fi

      - name: Deploy to production
        run: |
          echo "ðŸš€ Deploying to production..."
          # Adicione aqui seus comandos de deploy
