name: CI/CD Pipeline

on:
  pull_request:
    branches: [main]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
  push:
    branches: [main]
    paths-ignore:
      - 'README.md'
      - 'docs/**'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -r requirements.txt

      - name: Instalar dependências
        run: pip install -r requirements.txt

      - name: Verify migrations
        env:
          ALEMBIC_MIGRATION: "true"
          ENVIRONMENT: "test"
          DB_PATH: "test.db"
        run: |
          # Criar diretório data se não existir
          mkdir -p data

          # Criar banco de dados de teste
          touch test.db

          # Inicializar banco de dados com a primeira migração
          echo "🔧 Inicializando banco de dados..."
          alembic stamp base

          # Verificar migrações
          echo "🔍 Verificando migrações..."
          alembic check

          # Testar upgrade
          echo "⬆️ Testando upgrade..."
          alembic upgrade head

          # Testar downgrade
          echo "⬇️ Testando downgrade..."
          alembic downgrade base

          # Testar upgrade novamente
          echo "⬆️ Testando upgrade final..."
          alembic upgrade head

          # Limpar banco de teste
          rm test.db

      - name: Run tests
        run: |
          pytest tests/ --cov=./ --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v2
        with:
          file: ./coverage.xml

  staging:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Criar diretório do banco de dados
        run: mkdir -p data

      - name: Criar .env.staging
        run: |
          echo "ENVIRONMENT=staging" > .env.staging
          echo "DB_PATH=data/database_staging.db" >> .env.staging
          echo "ADMIN_SECRET=${{ secrets.ADMIN_SECRET_STAGING }}" >> .env.staging
          echo "WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY_STAGING }}" >> .env.staging
          echo "WHATSAPP_LINK=${{ secrets.WHATSAPP_LINK }}" >> .env.staging

      - name: Run migrations on staging
        env:
          ALEMBIC_MIGRATION: "true"
        run: |
          # Inicializar banco de dados
          alembic stamp base
          # Executar migrações
          alembic upgrade head

      - name: Validate staging
        run: |
          ENVIRONMENT=staging VALIDATE_DB=true python -c "from sqlalchemy import create_engine; from config import settings; engine = create_engine(f'sqlite:///{settings.DB_PATH}'); conn = engine.connect(); conn.close()"

  deploy:
    needs: staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Criar diretório do banco de dados
        run: mkdir -p data

      - name: Criar .env.production
        run: |
          echo "ENVIRONMENT=production" > .env.production
          echo "DB_PATH=data/database_production.db" >> .env.production
          echo "ADMIN_SECRET=${{ secrets.ADMIN_SECRET_PRODUCTION }}" >> .env.production
          echo "WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY_PRODUCTION }}" >> .env.production
          echo "WHATSAPP_LINK=${{ secrets.WHATSAPP_LINK }}" >> .env.production

      - name: Run migrations on production
        env:
          ALEMBIC_MIGRATION: "true"
        run: |
          # Inicializar banco de dados
          alembic stamp base
          # Executar migrações
          alembic upgrade head

      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production..."
          # Adicione aqui seus comandos de deploy
